---
name: ACR Purge Reusable
description: Composite action to clean ACR

inputs:
  azure-client-id:
    description: "Client (application) ID."
    required: true
    type: string
  azure-tenant-id:
    description: "Tenant (directory) ID."
    required: true
    type: string
  azure-subscription-id:
    description: "Subscription ID."
    required: true
    type: string
  registry:
    description: 'The name of the ACR to purge. Case insensitive.'
    required: true
    type: string
  repository-regex:
    description: 'The ACR repository to purge containers from.'
    required: true
    type: string
  tag-regex:
    description: 'Only purge containers with tags matching this regex.'
    required: true
    type: string
  duration-to-keep:
    description: 'A Go-style duration string (ex. --ago 2d3h6m) to indicate a duration beyond which images are deleted.'
    required: true
    type: string
  images-to-keep-count:
    description: 'Specifies that the latest x number of to-be-deleted tags are retained.'
    required: false
    type: string
  delete-untagged:
    description: 'Specifies that manifests that do not have associated tags (untagged manifests) are deleted.'
    required: false
    type: boolean
    default: false
  dry-run:
    description: 'Run a dry-run of the purge. Output is the same as during a real purge but nothing is deleted. Useful for testing a purge command.'
    required: false
    type: boolean
    default: true

runs:
  using: composite
  steps:
#    - id: azure-login
#      uses: azure/login@v1
#      with:
#        client-id: ${{ inputs.azure-client-id }}
#        tenant-id: ${{ inputs.azure-tenant-id }}
#        subscription-id: ${{ inputs.azure-subscription-id }}

    - id: run-purge-cmd
      shell: bash
      run: |
        PURGE_CMD="acr purge --filter '${{ inputs.repository-regex }}:${{ inputs.tag-regex }}' --ago ${{ inputs.duration-to-keep }}"
        
        if [ ${{ inputs.images-to-keep-count }} ]; then
          PURGE_CMD="$PURGE_CMD --keep ${{ inputs.images-to-keep-count  }}"
        fi
        
        if [ ${{ inputs.delete-untagged }} = true ]; then
          PURGE_CMD="$PURGE_CMD --untagged"
        fi
        
        if [ ${{ inputs.dry-run }} = true ]; then
          PURGE_CMD="$PURGE_CMD --dry-run"
        fi
        
        echo $PURGE_CMD

#        az acr run --cmd "$PURGE_CMD" --registry ${{ inputs.registry }} /dev/null
